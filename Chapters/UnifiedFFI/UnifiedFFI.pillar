!! Unified FFI
A Foreign Function Interface (FFI) allows a program written in one language to use resources written in another langauge. 
In this case, it allows us to access functions/procedures and data structures written in C.

In this document you will learn about the new FFI framework named Unified FFI, or uFFI for short.

We will show how to invoke functions written in C, access C structs, define callbacks and handle other frequent situations 
that you face when you want to interact with an external library. uFFI has been developed by E. Lorenzano.


!!! Calling a simple external function
To illustrate the purpose and usage of uFFI, we will start with an example.
Suppose that you want to know the amount of time the image has been running by calling the underlying OS function
named ==clock==. This function is part of the standard C library (==libc==). Its C declaration is:

[[[
clock_t clock(void);
]]]

For the sake of simplicity, let's consider that ==clock=='s return type is a ==uint== instead of ==clock\_t==.
We will discuss types, conversions and typedefs in subsequent sections.
This would result in the following function signature:

[[[
uint clock (void)
]]]

To call ==clock== from the image, we need to define a binding between a Smalltalk method and the corresponding function.
FFI bindings are normal smalltalk methods that use the ==ffiCall:module:== message to specify the C function they will call.
Let's then define a new class ==FFITutorial== and give it access to the ==clock== function:

[[[language=smalltalk
Object subclass: #FFITutorial
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'FFITutorial'

FFITutorial class >> ticksSinceStart [
  ^ self ffiCall: #( uint clock () ) module: 'libc.so.6'
]
]]]

@@note The module name above is an example for linux systems. For this code to run on other platforms you need to replace the =='libc.so.6'== string by e.g. =='libc.dylib'== for Mac OS or =='msvcrt.dll'== for windows.

For Mac OS:
[[[language=smalltalk
FFITutorial class >> ticksSinceStart [
  ^ self ffiCall: #( uint clock () ) module: 'libc.dylib'
]
]]]

For Windows:
[[[language=smalltalk
FFITutorial class >> ticksSinceStart [
  ^ self ffiCall: #( uint clock () ) module: 'msvcrt.dll'
]
]]]

In our example, we've defined a new empty class, and a method named ==ticksSinceStart== on its class side.
The method ==ffiCall:module:== is provided by UnifiedFFI and defined in ==Object==, so we can use it either on the instance or the class-side.

@@note The message ==#ffiCall:module:== cannot be used as a normal expression in a playground or in the middle of a method. It must only be sent by methods whose only purpose is to define a callout because it does some context mangling behind the scenes.

To test if our code works, execute the method and print its result:

[[[language=smalltalk
FFITutorial ticksSinceStart
]]]

If everything went ok, this expression will return the number of native clock ticks since the Pharo process started.

!!! Analyzing the FFI callout

To understand what happenned and how it worked, let us look at the binding definition again:

[[[language=smalltalk
FFITutorial class >> ticksSinceStart [
	^ self ffiCall: #( uint clock () ) module: 'libc.so.6'
]
]]]

The binding we just created is also called an FFI callout, as it calls a function in the ''outside world'' (the C world).
The method ==ffiCall:module:== is the one in charge of making the callout.
In other words, it first transforms (marshalls) all arguments from Smalltalk to C, pushes them onto the C stack, performs a call to the external function, and finally converts (marshalls) the return value from C to Smalltalk.
To do all this, ==ffiCall:module:== uses the function description provided as its argument.
The first argument is the ''signature'' of the function we want to call, described with an array, and the second argument is the ''module'' or ''library'' where uFFI will look for it.

In our example, the signature is as follows: ==#(uint clock ())==
- Its first element is the C return type, here ==uint==.
- Its second is the name of the called function, here ==clock==.
- Its third element is an array describing the function parameters, if any.

Basically, if you strip down the outer #(), what is inside is a C function prototype that is very close to normal C syntax.
This is intentionally done so that in most cases you can actually copy-and-paste a complete C function declaration, taken from a header file or documentation, and it is ready for use.
The second argument - in our example =='libc.so.6'== - is the name of the library that contains the function.
The avid reader will notice that our binding is platform dependent, as it will only run on a linux machine. We will explore how to define bindings in a platform-independent way in the following section.

While ==ffiCall:module:== is the most common callout message, later we will discuss other methods.

!!! A note on marshalling

In the ==clock== callout example above, we specified the return type as ==uint== and not ==SmallInteger==. This is because uFFI types are always described as they are in the C language. You will also see this with function arguments elsewhere in this chapter. In general you don't have to worry too much about this, because uFFI knows how to map standard C values to Smalltalk objects and vice-versa. So, when a callout is executed, the return value will be converted into a ==SmallInteger==.
You can also define new mappings from C types to Smalltalk objects. This is useful when wrapping libraries that
define new C types as we will show later.

This process of converting types between different languages is called ''marshalling''.
We will see more examples of automatic conversions (by automatic, we mean that they are already defined in
uFFI) in this chapter.

!!! Modules and libraries

We saw before that a callout requires us to specify a module or library.
uFFI uses this information to look up the given function.
In our previous example, we were looking up the ==clock== function inside the standard C library, i.e., ==libc.so.6== in a unix system.

We've seen how to specify a module by using a library name.
However, this creates a portability issue as a library will not necessarily have the same name, or be located in the same place, on all platforms.
uFFI solves this problem with library objects, which dynamically determine the correct name of the library for the current platform.
Library objects are created by subclassing ==FFILibrary== and defining the methods ==macModuleName==, ==unixModuleName== and ==win32ModuleName==.
uFFI can then query this object to get the correct module name given the current platform.

In fact, uFFI already provides such an object for ==LibC==. Here is the relevant implementation excerpt:

[[[language=smalltalk
FFILibrary subclass: #LibC
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'UnifiedFFI-Libraries'

LibC >> macModuleName [
	^ 'libc.dylib'
]

LibC >> unixModuleName [
	^ 'libc.so.6'
]

LibC >> win32ModuleName [
	"While this is not a 'libc' properly, msvcrt has the functions we are defining here"
	^ 'msvcrt.dll'
]
]]]

With this platform-aware library object, we can re-implement our binding in a platform-independent fashion:

[[[language=smalltalk
FFITutorial class >> ticksSinceStart [
	^ self ffiCall: #( uint clock () ) module: LibC
]
]]]

As you can see, it is very easy to express library details dynamically. Here is a more complex example showing how the Cairo library specifies its location on different unix-like platforms:

[[[language=smalltalk
CairoLibrary >> unixModuleName [
		"On different flavors of linux the path to library may differ
		depending on OS distro or whether system is 32 or 64 bit."

		#(
			'/usr/lib/i386-linux-gnu/libcairo.so.2'
			'/usr/lib32/libcairo.so.2'
			'/usr/lib/libcairo.so.2')
		do: [ :path |
			path asFileReference exists ifTrue: [ ^ path ] ].

		self error: 'Cannot locate cairo library. Please check if it installed on your system'
]
]]]

This is very useful and is the recommended way of dealing with libraries, instead of hardcoding module names.

Finally, note that any class can also define a method ==ffiModuleName== to provide a default module for bindings in that class.
Callouts which do not specify a module would then use this default module.

[[[language=smalltalk
FFITutorial class >> ffiLibraryName [
	^ LibC
]

FFITutorial class >> ticksSinceStart [
	^ self ffiCall: #( uint clock () )
]
]]]

@@note ==ffiLibraryName== is a terrible name I forgot to change. It should be just ==ffiLibrary== (but now changing it is not so easy...)

!!! Passing arguments to a function

The previous ==clock== example was the one of the simplest possible. It executes a function without parameters and we
got the result. Now let's look how we can call functions that take arguments.

!!! Passing a method parameter

Let's start with a really simple function: ==abs()==, which takes an integer and returns its absolute value.

""C header.""
[[[
int abs ( int n );
]]]

""Smalltalk binding.""
[[[language=smalltalk
FFICExamples class >> abs: anInteger [
	^ self ffiCall: #( int abs (int anInteger) ) module: LibC
]
]]]

Compared to the previous example, we changed the name of the function and added an argument.
When functions have arguments you have to specify two things for each of them:
# their type and the object that you want to be sent to the C function. That is, in the arguments array, we put the type of the argument (==int== in this example), and
# the ''name of the Smalltalk variable'' we pass as argument.

Here ==anInteger== in ==#(int abs (int anInteger)== means that the variable is bound to the ==abs:== method parameter
and will be converted to a C int, when executing a call.

This type-and-name pairs will be repeated, separated by comma for each argument, as we will show in the next examples.

Now you can try printing this:

[[[language=smalltalk
FFICExamples abs: -42.
]]]

!!! About arguments

In the callout code/binding declaration, we are expressing not one but ''two'' different aspects: the obvious one
is the C function signature, the other one is the objects to pass as arguments to the C function when the method is
invoked.
In this second aspect there are many possibilities.
In our example the argument of the C function is the method argument: ==anInteger==.
But it is not always necessary the case.
You can also use some constants, and in that case it's not always necessary to specify the type of the argument.
This is because FFI-NB automatically uses them as C 'int's: ==nil== and ==false== are converted to 0, and ==true== to 1.
Numbers are converted to their respective value, and can be positive and negative.

!!! Passing literals

Imagine that we want to have a wrapper that always calls the ==abs== function with the number -42.
Then we directly define it as follows:

[[[language=smalltalk
FFICExamples class >> absMinusFortyTwo [
	^ self ffiCall: #( int abs (-42) ) module: LibC
]
]]]

Note that we omitted the type of the argument and directly write  ==int abs (-42)== instead of writing
==int abs (int -42)== since by default arguments are automatically converted to C int.

But, if the C function takes a float/double as argument for example, you must specify it in the signature:

[[[language=smalltalk
FFICExamples class >> floor: aFloat [
	^ self ffiCall: #( double floor(double aFloat) ) module: LibC
]
]]]

@@todo Luc Examples with more complex literals: arrays, ...

!!! Passing variables

Often some functions in C libraries take flags as arguments whose values are declared using #define in C headers.
You can, of course take these constant values from header and put them into your callout.
But it is preferable to use a symbolic names for constants, which is much less confusing than just bare numbers.
To use a symbolic constant you can create an instance-variable, a class-variable or a variable in shared pool, and
then use the variable name as an argument in your callout.

For example, imagine that we always pass a constant value to our function that is stored in a class variable of our class:

[[[language=smalltalk
Object subclass: #FFICContantExamples
	...
	classVariables: 'TheAnswer'
..
]]]

Then don't forget to initialize it properly:

[[[language=smalltalk
FFICContantExamples class >> initialize [
	TheAnswer := -42.
]
]]]

And finally, in the callout code, we can use it like following:

[[[language=smalltalk
FFICContantExamples class >> absMinusFortyTwo [
	^ self ffiCall: #( int abs ( TheAnswer ) ) module: LibC
]
]]]

You can also pass ==self== or any instance variable as arguments to a C call.
Suppose you want to add the ==abs== function binding to the class ==SmallInteger== in a method named  ==absoluteValue==, so that we can execute ==-50 absoluteValue==.

In that case we simply add the ==absoluteValue== method to ==SmallInteger==, and we directly pass ==self== as illustrated below.

[[[language=smalltalk
SmallInteger >> absoluteValue [
	^ self ffiCall: #( int abs (int self) ) module: LibC
]
]]]

It is is also possible to pass an instance variable, but we let you do it as an exercise :)

!!! Passing strings

As you may know strings in C are sequences of characters terminated with a special character: ==\\0==.
It is then interesting to see how FFI-NB deals with them since they are an important data structure in C.
For this, we will call the very well known ==strlen== function.
This function requires a string as argument and returns its number of characters.

""C header"".
[[[
int strlen ( const char * str );
]]]

""Smalltalk binding"".
[[[language=smalltalk
FFICExamples class >> stringLength: aString [
	^ self ffiCall: #( int strlen (String aString) ) module: LibC
]
]]]

!!! Example analysis

You may have noticed that the callout description is not exactly the same as the C function header.

In the signature ==#( int strlen (String aString) )== there are two differences with the C signature.
- The first difference is the const keyword of the argument. For those not used to C, that's only a modifier keyword that the compiler takes into account to make some static validations at compile time. It has no value when describing the signature for calling a function at runtime.
- The second difference, an important one, is the specification of the argument. It is declared as ==String aString== instead of ==char * aString==. With ==String aString==, FFI-NB will automatically do the arguments conversion from Smalltalk strings to C strings (null terminated). Therefore it is important to use String and not ==char *==. In the example, the string passed will be put in an external C ==char== array and a null termination character will be added to it. Also, this array will be automatically released after the call ends. This automatic memory management is very useful but we can also control it as we will see later. Using ==(String aString)== is equivalent to ==(someString copyWith: (Character value:0)== as in ==FFICExamples stringLength: (someString copyWith: (Character value:0)==. Conversely, FFI-NB will take the C result value of calling the C function and convert it to a proper Smalltalk Integer in this particular case.

!!! Passing two strings

We will now call the ==strcmp== function, which takes two strings as arguments and returns -1, 0 or 1 depending on
the relationship between both strings.

""C header""
[[[
	int strcmp ( const char * str1, const char * str2 );
]]]

""Smalltalk binding""
[[[language=smalltalk
FFICExamples class >> stringCompare: aString with: anotherString [
	^ self ffiCall: #( int strcmp (String aString, String anotherString) ) module: LibC	
]
]]]

Notice that you can add arguments by appending them to the arguments array, using a comma to separate them. Also
notice that you have to explicitly tell which object is going to be sent for each argument, as already told. In this
case, aString is the first one and anotherString is the second one.

!!! Getting return value from a function

Symmetrically to arguments, returned values are also marshalled, it means that C values are converted to Smalltalk objects.

We already saw that implicitly through multiple examples since the beginning of the chapter.
For example in the ==abs== example, the result is converted from an int to a SmallInteger.
In the ==floor== example, the  result is converted from a double to a Float.

But FFI-NB can also convert types a bit more complex than atomic types, like String

[[[language=smalltalk
FFICExamples >> #getEnv: aString [
	^ self ffiCall: #( String getenv (String string) ) module: LibC
]
]]]

There is a mapping defined for each atomic type. About a bit more complex objects (like external objects or structures),
we will talk in following sections.

!!! Returning "void *"

Take this call as an example:

[[[language=smalltalk
FFICExamples class >> malloc: aNumber [
	^ self ffiCall: #( void * malloc ( int aNumber ) )
]
]]]

This is a special case of return: when there is a function who answers a ''void *''. In this case, since FFI-NB cannot know
which kind of object it represents, it will answer an instance of ==ExternalData== (we will see this in next section).

@@todo Luc illustrate that when NULL (a pointer with value 0) is returned, it is automatically converted to nil

!!! External address

External addresses (contained in the class ==ExternalAddress==) is the way we represent any kind of data ''outside''
Smalltalk. That means data (pointers, structures, arrays) who are allocated in the heap.

An ==ExternalAddress== can be:

- an allocation of memory (you can use ==ExternalAddress class >> allocate:== or ==ExternalAddress class >> gcallocate:==). Note that in case of ==#allocate:== you will need to ==#free== the external address later (==#gcallocate:== does that work for you).
- the result of a function call (usually it will come as part of an ==ExternalData==)

==ExternalData== represents an ==ExternalAddress== with an C type associated. For example,

Both ==ExternalAddress== and ==ExternalData== can be used as arguments when declaring functions with pointers as parameters,
for example:

[[[
LibC >> memCopy: src to: dest size: n [
	^ self ffiCall: #(void *memcpy(void *dest, const void *src, size_t n)
]
]]]

!!! External objects

==FFIExternalObject== represents an object in the heap. An external object is a reference to any kind of data allocated in the heap mapped to a Smalltalk object.

This is confusing, so I will try to explain it better: When you allocate a region of memory in the heap, you get a pointer to that location, which does not represent anything. But often, frameworks will allocate structures, pointers, etc. which actually represents "an object" (not in the same sense as a Smalltalk object, but can be interpreted like one). For example,
to create a cairo surface, you can call this:

[[[
AthensCairoSurface class >> primImage: aFormat width: aWidth height: aHeight [
	^ self ffiCall: #(AthensCairoSurface * cairo_image_surface_create ( int aFormat,
	int aWidth, int aHeight) )
]
]]]

This will call the cairo function ==cairo_image_surface_create== but instead answer an ==ExternalAddress== it will create an
instance of ==AthensCairoSurface==, so you can treat the allocated pointer as an object.

Any class in the system can be an external object as long as either:
- it inherits from ==FFIExternalObject==; or
- it implements in its ""class side"" the method ==asExternalTypeOn:==.

You can check for implementors of ==asExternalTypeOn:== for examples, but they usually looks like this one:

[[[
AthensCairoCanvas class >> asExternalTypeOn: generator [
	"use handle ivar to hold my instance (cairo_t)"
	^ FFIExternalObjectType objectClass: self
]
]]]

@@note if you want to add the resource to an automatic free mechanism (to make GC frees also the external object), you need
to call ==autoRelease== (in case of children from FFIExternalObject) or implement similar mechanism.

@@note FFIExternalObject replaces NBExternalObject

!!! How autoRelease works

Sending #autoRelease message of an object registers object for finalisation with a particular executor.
Then behaviour is divided:

-A.1) for ExternalAddresses, it just registers in regular way, who will call ==finaliz==e on GC
-A.2) finalize will just call a free assuming ExternalAddress was allocated (which is a malloc)

- B.1) for all FFIExternalReference, it will register for finalisation what ==resourceData== answers (normally, the handle of the object)
- B.2) finalisation process will call the object class >> finalizeResourceData: method, with the==resourceData== result as parameter
- B.3) each kind of external reference can decide how to free that data (by default is also just freeing).

An example of this is how AthensCairoSurface works.

@@todo add an example

!!! Structures
The ==FFIExternalStructure== object is used to manipulate C structures from Pharo.
From the standard C library we can use the ==div()== function as an example.
Given a numerator and denominator, it returns a structure holding the quotient and remainder. In stdlib.h we find these definitions:

[[[
typedef struct
{
	int quot;	/* Quotient.  */
	int rem;	/* Remainder.  */
} div_t;

div_t div (int __numer, int __denom)
]]]

Converting these to FFI definitions we get...
[[[
FFIExternalStructure subclass: #Div_t
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'UnifiedFFI-ExampleLibC'
]]]


[[[
Div_t class >> fieldsDesc [
	"self rebuildFieldAccessors"
	^ #(
		int quot;
		int rem;
		)
]
]]]

[[[
LibC class >> div_numer: numer denom: denom [
	^ self ffiCall: #( Div_t div( int numer, int denom ) ) module: LibC
]
]]]

So lets try it out.

[[[
LibC div_numer: 7 denom: 2 
	"Div_t ( quot: 3	rem: 1)"
]]]
 
Now for another example, imagine you need to manipulate the following C structure from Pharo:

[[[
struct My_Structure {
	uint8 id;
	char * name;
	uint name_length;
}
]]]

The first step is to create a subclass of ==FFIExternalStructure== that we name ==MyStructure==:

[[[
FFIExternalStructure subclass: #MyStructure
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'FFIDemo'
]]]

Then, we need to describe the structure. This is done by overriding the ==FFIExternalStructure class >> #fieldsDesc== method.
The syntax used to do it is pretty close to the C syntax:

[[[
MyStructure class >> #fieldsDesc [
	^ #(
	uint8 id;
	char * struct_name;
	uint name_length;
	)
]
]]]

Once the structure is described, you can generate the accessors by evaluating ==MyStructure rebuildFieldAccessors==.
This will generate accessors and mutators on instance side of ==MyStructure==.

Now we are going to make the use of this structure a bit easier. As you saw before, the structure holds a char pointer
to represent its name (as a ==String==) and it also holds the length of this ==String== in ==name_length== field.

Right now, you can use the structure like this:
[[[
myStruct := MyStructure externalNew. "Use #externalNew to create the object on the external heap."

"Create an external array of type char to hold the name."
newName := FFIExternalArray externalNewType: 'char' size: 3.
'foo' doWithIndex: [ :char :i |
	newName at: i put: char ].

"Set the name."
myStruct struct_name: newName.
myStruct name_length: newName size.

"Get the name."
structName := String
	newFrom: (FFIExternalArray
				fromHandle: myStruct struct_name getHandle type: 'char' size: myStruct name_length)
]]]

So to get the actual string, you need to take the char pointer and read ==name_length== char. We are going to wrap this
procedure in a new method:

[[[
MyStructure >> #structName [
	^ String
		newFrom: (FFIExternalArray
					fromHandle: self struct_name getHandle type: 'char' size: self name_length)
]
]]]

We want the same thing for the mutator. We do not want to matter with ==name_length== when setting ==struct_name==:

[[[
MyStructure >> #structName: aString [
	| externalArray |
	externalArray := FFIExternalArray externalNewType: 'char' size: aString size.
	aString doWithIndex: [ :char :i |
		externalArray at: i put: char ].
	self struct_name: externalArray.
	self name_length: aString size.
]
]]]

With the two preceding methods added, you can use ==MyStructure== the same way you use any other Pharo object:

[[[
"Of course you still need to use #externalNew!"
myStruct := MyStructure externalNew 
	structName: 'foo';
	id: 42;
	yourself.

myStruct structName. "foo"
myStruct id. "42"

myStruct structName: 'bar'.
myStruct structName. "bar"
]]]


!!! Arrays
In Pharo, arrays can have any kind of objects inside, but that's not the case in C where each array can contain an unique type. 

UnifiedFFI provides two ways to declare C arrays: ==FFIExternalArray== and ==FFIArrayType==. As their name suggest there are subtle difference 
between them.

- ==FFIExternalArray== can be used to instantiate external arrays of any type.
- ==FFIArrayType== can be used to declare new types that are arrays (something like a C typedef declaration).

!!!! FFIExternalArray
An ==FFIExternalArray== is an easy way to pass arrays to functions, as you can see in this example :

[[[
FFICallback class >> primQsort: array with: count with: size with: compare [
	self
		ffiCall: #(void qsort (FFIExternalArray array, size_t count, size_t size, FFICallback compare)) 
		module: LibC
]
]]]

this declaration will receive an array of any kind and it will pass it to the ==qsort== function. This is possible because in C, an array 
is not more than a reference checked by the compilator (which we are skipping). To ''use'' this function, we need to declare a type like this: 

[[[
array := FFIExternalArray externalNewType: 'double' size: 100.
1 to: 100 do: [ :i| values at: i put: Random new next ].

FFICallback class 
	primQsort: array
	with: 100 
	with: array type typeSize 
	with: aCallback. "We will see callbacks in the next entry ""Callbacks"""
]]]

This approach is very simple, but it fails to work in the case of structures, because with ==FFIExternalArray== we know the size of the array 
just after instantiating it. To fix this problem we use ==FFIArrayType==.

!!!! FFIArrayType
==FFIArrayType== works as ==FFIExternalArray== for most of the cases (after all, it inherits from it) but instead its parent, ==FFIArrayType== acts 
defining ""a new type"", as it would be using typedef in C. 

Declare a new array type is very simple : 

[[[
Example class >> initialize [
	Char128 := FFITypeArray ofType: #char size: 128.
	array := Chat128 new.
]
]]]

This will declare an array equivalent to ==char[128]== and it will instantiate a variable of that array. 
In the example, we use a class variable ==Char128== to store our new defined type, hence it will be accesible in all the hierarchy. If we want 
a more visible type, we can put it in a ==SharedPool== to make it accessible. 

This approach can be used in any circunstance but is particulary useful for using with structures, because structures need to be allocated with a
precise size and alignment.

For example, we can instantiate an structure of this type in C: 

[[[
struct example {
	char[128] chars;
}
]]]

in Pharo : 

[[[
Example class >> fieldsDesc [
	^ #(
	Char128 chars
	)
]
]]]

!!! Callbacks
A callback is, as its name says, when an external function calls back Pharo to inform/require/do something. The typical example done with the C 
function qsort (quick sort), which calls a comparator function to determine element position. 

This example can be found on ==FFICallback class >> exampleCqsort==.

To pass a callback to a C function, we need to declate it providing the expected signature and the execution block: 

[[[
callback := FFICallback
	signature:  #(int (const void *arg1, const void *arg2))
	block: [ :arg1 :arg2 | ((arg1 doubleAt: 1) - (arg2 doubleAt: 1)) sign ].
]]]

This will declare an anonymous function that receives as parameter two void pointers (arg1, arg2) and answers an int. 

The function that will receive this callback as argument needs to be modified to declare the correct type (as is shown also in FFIExternalArray section): 

[[[
FFICallback class >> primQsort: array with: count with: size with: compare [
	self
		ffiCall: #(void qsort (FFIExternalArray array, size_t count, size_t size, FFICallback compare)) 
		module: LibC
]
]]]

then you will just use as any other regular parameter.

Some remarks: 
- You need to be really careful on how you keep your callbacks: since you do not know when it will be executed, there is always the possibility for the VM to garbage collect them while in execution. In that case your image will crash. The best solution here is to keep a strong reference of the callback while you know it will be alive.
- Callbacks are tricky! Do not over-use them, the VM is not prepared to execute callbacks inside callbacks ot other special behaviours (it may be in the future, but for now best is to keep callbacks as small as possible).

!!! Opaque references
UnifiedFFI can work with opaque types (An opaque datatype is an structure which fields are not visible and is always accessed through a pointer 
to it, see *https://en.wikipedia.org/wiki/Opaque_data_type*).
This is usefull when working with obscure types (types we do not know its composition).
Take this as an example (taken from SQLite bindings): 

[[[ 
typedef struct sqlite3 sqlite3;
typedef struct sqlite3_stmt sqlite3_stmt;
]]]

this defines a type of a structure, and then is used along the api in this way: 

[[[
int sqlite3_open(char *filename, sqlite3 **handle);
char *sqlite3_column_name(sqlite3_stmt* aStatement, int aColumn)
]]]

this means we always access them through a reference. Now, we could declare the pointer to the structures (using ==FFIExternalObject==), 
but then our declarations wouldn't be as close to C as we want, as we need to change the declaration.

This is where ==FFIOpaqueObject== come to help: we declare it and then we use it always as reference.

In the case of the example, it would work like this: 

[[[ 
SQLite3 class >> initialize [
	sqlite3 := #FFIOpaqueObject.
	sqlite3_stmt :=	#FFIOpaqueObject.
]

SQLite3 class >> primOpen: filename handle: handle [
	self ffiCall: #(int sqlite3_open(String filename, sqlite3 **handle)).
]

SQLite3 >> primColumnBlob: aStatement column: aColumn [
	self ffiCall: #(const void *sqlite3_column_blob (sqlite3_stmt* aStatement, int aColumn))
]
]]]

!!! Handles (Windows)
Constant HANDLEs, as described in *Windows MSDN>https://msdn.microsoft.com/en-us/library/windows/desktop/ms724457(v=vs.85).aspx*
are a special kind of external object who are accessed through numbers, therefore and ==ExternalAddress== is not appropriate to 
describe it (since they are constants and external addresses represents disposable spaces from memory).

Is not clear this is necessary outside Windows, but according to documentation they are somekind analogous to unix's File Descriptors 
(with some remarkable diferences, as documented *here>http://lackingrhoticity.blogspot.fr/2015/05/passing-fds-handles-between-processes.html*.

Example: 
[[[
User32 class >> initialize [
	HWND := #FFIConstantHandle.
]

User32 class >> getActiveWindow [
	^ self ffiCall: #(HWND GetActiveWindow())
]
]]]

!!! Annexes


!!!! Casting 
In Pharo, “casting” as made in C is not necessar since this is just a way to tell the C compiler that a pointer is form a certain 
type (but is always a pointer, and in machine code is always the same). Nevertheless, there are some usages were we may want to see 
pointers as specific instances in our image. 
Next examples will cover this cases.

!!!!! Converting pointers to objects of any type
So, here you will do something like this: 

Let's suppose you want to execute something like this (taken from a question on the pharo mailing list): 

[[[
Iterator >> asCollectionOfType: aTypeName [
	| result address typeClass |
	
	result := OrderedCollection new.
	address := ExternalAddress new.
	typeClass := FFIExternalType resolveType: aTypeName.
	[ self iterator_next: address ] 
		whileTrue: [ result add: (address castTo: typeClass) ].
  ^result
 ]

Iterator >> iterator_next: data [
	^ self ffiCall: #(Boolean iterator_next (Iterator self, void** data))
]
]]]


This is, you want to iterate a collection of certain type and converting it to proper instances on Pharo side. 

While you could always implement ==#castTo:== simply like this: 

[[[
ExternalAddress >> castTo: aClass [
	^ aClass fromHandle: self
]
]]]

But you will still have a problem if your type if your type is an “atomic” type, like ==int==, ==long==, etc. because those values are passed 
“by value” and not by pointer, so you will need to decode them. In this case, I would implement a method extension and use double dispatch: 

[[[
ExternalAddress >> castTo: aClass [
	^ aClass valueFromHandle: self
]

FFIExternalType class >> valueFromHandle: anAddress [
	“This is used for structures, but we can reuse them :)"
	^ self new handle: anAddress at: 1 
]
		
FFIExternalReference class >> valueFromHandle: anAddress [
	^ self fromHandle: anAddress
]

FFIExternalStructure class >> valueFromHandle: anAddress [
	^ self fromHandle: anAddress
]
]]]

Then your cast will work as expected.

!!!!! Non conventional casts
Casting in C is trivial. You can do something like this:

[[[
void *var = 0x42000000.
]]]

And you will be creating a pointer who points to the address 0x42000000. This kind of declarations are used in certain frameworks, notably some Windows libraries.

In Pharo this "casting" is not so easy, and we need to declare this kind of variables as ExternalAddresses. We do this as this:

[[[
var := ExternalAddress fromAddress: 16r42000000.
]]]

!! FAQs

If someone is interested to collect questions and answers from the mailing-list this is where there could go. 
