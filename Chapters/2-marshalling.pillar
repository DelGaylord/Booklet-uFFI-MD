!! Marshalling and Function Arguments

In the last chapter we looked at the basics of FFI call\-outs to define a Pharo uFFI binding to a function.
These first examples introduced the concepts of function lookup, library references, and marshalling of return values.
However, the idea of marshalling is not specific to the transformation of return values from C to Pharo: it also involves the transformation of Pharo values to C, and the sharing of values between the two.

This chapter presents marshalling in more detail, focusing on function arguments.
Our first examples show uFFI's capability of using literals as default argument values.
We then advance to other basic data types, from Strings and ByteArrays all the way to C pointers and how to manipulate them within Pharo.
This chapter finishes by presenting the different marshalling rules in uFFI for basic types, particularly how to manage platform-specific types.

!!! A First Function Argument

Our previous ==clock== example was the one of the simplest uFFI examples possible, as it does not require passing any arguments, and because we could easily tweak the binding to map the return value to an unsigned integer.
To understand how to deal with function arguments, let's consider the ==abs()== function, which receives an integer argument and returns its absolute value.
The function prototype of ==abs()==, available in the standard C library as in our previous examples, is declared as follows:

[[[
int abs( int n );
]]]

To create a binding for such a function requires that we somehow provide an ==int== argument in our binding.
To ease the construction of argument bindings, uFFI will automatically match the parameter names in our calling method to any corresponding function parameters that have the same name.
In other words, we can define our binding for ==abs()== as a method with a single ==n== argument as follows:

[[[language=smalltalk
FFITutorial class >> abs: n [
	^ self ffiCall: #( int abs ( int n ) )
]
]]]

Creating this binding does not really add any extra complexity to what we did in our previous examples.
We create a simple method that uses the ==ffiCall:== message, providing it an Array argument with a copy of the function's prototype.
The only visible addition is the introduction of the ==n== parameter, but no additional work was needed to transform Pharo's object to a C value.
We can even rename the parameter to use a more Pharo''ish'' naming style, such as ==anInteger==\:

[[[language=smalltalk
FFITutorial class >> abs: anInteger [
	^ self ffiCall: #( int abs ( int anInteger ) )
]
]]]

Finally, we can now use this binding from a playground as follows, with a regular Pharo SmallInteger.

[[[language=smalltalk
FFITutorial abs: -42.
]]]

!!! Marshalling

Again, it was uFFI that managed value transformations for us.
This transformation may look like uFFI simply copies the Pharo integer value to the C memory.
However, these marshalling rules are not as straight forward, as Pharo and C use different data representations for each different data-type, and is potentially modified per platform.

To illustrate how marshalling works, let's consider the marshalling of a SmallInteger to a C ==int== type as in the example.
Internally, to differentiate integers from object pointers, Pharo represents SmallIntegers with an extra bit tagging the value.
Let's consider the SmallInteger 2, represented in binary as the number 10, and is internally represented by Pharo as 101.
This ''representation mismatch'' requires that uFFI transforms small integers to C ==int==s as follows:
- a Pharo small integer transformed in a C value needs to be shifted to the right, ==101 >> 1==, transforming 101 to 10.
- a C integer transformed in a Pharo small integer needs to be shifted to the left and added 1, ==(10 << 1) + 1==, transforming 10 to 101.

!!!! Pharo-to-C Marshalling

When marshalling Pharo objects to C, uFFI decides the rule of marshalling to use depending on two pieces of information.
On the one hand, it uses the concrete type of the marshalled object ''its class''.
On the other hand, it uses the type defined in the function binding as the target transformation type.
At run time, when the binding method is executed, uFFI takes the type of the binding argument and transforms the argument object to the C representation of that type, doing a ''cast'' if necessary. This transformation rules has several consequences, that we will illustrate in several cases using our running ==abs== example:

- SmallIntegers are transformed to ==int==s as expected.

[[[language=smalltalk
FFITutorial abs: -42.
=> 42
]]]

- Integers that overflow the ==int== size are casted/cut down, producing results similar to what a C program would produce.

[[[language=smalltalk
FFITutorial abs: SmallInteger maxVal.
=> 1
]]]

- Floats used for ==int==s will be automatically casted and only their integer part retained

[[[language=smalltalk
FFITutorial abs: Float pi.
=> 3
]]]

- Objects non compatible with the ==int== type are rejected and an exception is thrown

[[[language=smalltalk
FFITutorial abs: Object new.
=> exception!
]]]

!!!! C-to-Pharo Marshalling

A similar-yet-different story happens when marshalling C values to Pharo objects.
In this case uFFI decides the rule of marshalling depending on just the specified return type.
At run time, when the binding method is executed and the function returns, uFFI transforms the returned value to the closest Pharo type for the specified C type.
For example, the ==int== type will interpret the returned data as SmallIntegers or Positive/Negative/LargeIntegers depending on their size and sign,
the ==float== type will interpret the returned data as Float.

!!!! Marshalling of Incorrectly Declared Types

The marshalling rules we have seen above show that the way in which we specify function types is crucial to the correct behaviour of our bindings, and thus our applications.
In other words, bindings require that types are correctly specified, runtime errors, or even worse, incorrect value transformation may happen.
Let's consider as an example what happens if we modify the signature of the ==abs== function to use a ==float== as argument.

[[[language=smalltalk
FFITutorial class >> floatAbs: aFloat [
	^ self ffiCall: #( int abs (float aFloat) )
]
]]]

And then we evaluate in a playground our binding with a negative float value:

[[[language=smalltalk
FFITutorial floatAbs: -1.0.
=> 0
]]]

Although we expected the message to return 1 (because the return value is still of type ==int==), this example returns 0.
To understand this result, we need to first understand that our bindings, and the way we expressed their types, are independent of the actual function implementation we are calling.
In other words, even if we set the type of ==abs== to ==float==, the ==abs== function in our system was built and compiled to work on ==int== values.
So what happens under the hoods in this example is that uFFI transforms our -1.0 Pharo float to a C float, and then uses that value as if it was an integer.
And it happens that integers and floats have different representations in C.
This produces both hillarious and dangerous results.

A similar problem arises if the return type of a function is incorrectly specified.
Let's take for example a slightly modified version of our ==abs== binding for float return types:

[[[language=smalltalk
FFITutorial class >> floatReturnAbs: anInteger [
	^ self ffiCall: #( float abs (int anInteger) )
]
]]]

Whenever this function returns, it will interpret the returned value as a float.
However, as the actual implementation of ==abs== returns an ==int==, the integer is just wrongly interpreted producing strange values.

[[[language=smalltalk
FFITutorial floatReturnAbs: Float pi.
=> 3.3702805504e12
]]]

Although writing library bindings with uFFI is fun and simple, the binding developer needs to make sure that the types are correctly declared, and that the correct version of the library is used. Fortunately, for mature libraries most of the times it is enough to copy and paste the function declarations.

!!! Function Argument Bindings

We have seen in the introductory example before how to use method parameters as arguments in our function bindings.
In this section we explore other ways to define arguments, in particular literal integers, instance and class variables.

!!!! Literal Integer Arguments

From time to time we will find C functions presenting much more parameters than the ones we are interested in.
For example, they may have extra parameters for optional options and configurations, or even parameters that are only necessary in particular cases and ignored in others.
Although ''optional'', we cannot leave these parameters out of the binding, as they need to be there for the call to happen correctly.
To cope with optional parameters, uFFI allows literal objects to be sent as function arguments.

To illustrate this, let's first imagine that for some reason we need to call the ==abs== function with the -42 argument exclusively.
With the tools we have seen until now, a simple way to define such a binding would be to define a normal Pharo method calling our binding with the value -42.

[[[language=smalltalk
FFITutorial class >> absMinusFortyTwo [
	^ self abs: -42
]
]]]

This approach is convenient one when we want both ==abs:== and ==absMinusFortyTwo== to be exposed to the final user.
Ultimately it benefits from the binding being declared only once, so we can isolate potential marshalling mistakes in a single place.
However, we do not always want to expose the ==abs== function directly as in this case.
To cover this feature, uFFI supports the usage of literal arguments in function bindings.
Instead of using a method parameter as argument in the function binding, we can specify a literal value.

[[[language=smalltalk
FFITutorial class >> absMinusFortyTwo [
	^ self ffiCall: #( int abs ( (int) -42) ) module: LibC
]
]]]

Literal integers should be accompanied with a type annotation like the ==(int)== above.
This type information is needed by uFFI to correctly decide how to transform the integer, as many different variants may happen.
Consider that C integers can be signed or unsigned, and occupy different sizes like 8, 16, 32, 64 bits...
We will present more in detail the different data types accepted by uFFI, in particular integer data types, in a following section in this chapter.

!!!! Variables

In the methods above we used literal numbers as arguments in ffi callouts.
Although handy, these literal numbers enter in the category of ''magic numbers''.
In other words, these literal numbers that lie in the code do not explain where those numbers came from, how they were chosen or calculated.
One way to avoid the spread of magic numbers in the code is to assign names to them, usually done with variables or constants.

C libraries often define such constants using #define pre-processor statements like.

[[[language=c
  #define magicNumber -42
]]]

In Pharo, we take a similar approach by defining our value in a class variable.
We change the definition of the ==FFITutorial== class to include a class variable ==TheAnswer==, and define a class-side ==initialize== method to initialize the value. Do not forget to execute this ==initialize== method so the value is actually set.

[[[language=smalltalk
Object subclass: #FFITutorial
	...
	classVariables: 'TheAnswer'
  ...

FFITutorial class >> initialize [
	TheAnswer := -42.
]
]]]

Finally, we proceed to redefine our callout binding to use our class variable.

[[[language=smalltalk
FFITutorial class >> absMinusFortyTwo [
  ^ self ffiCall: #( int abs ( (int) TheAnswer) ) module: LibC
]
]]]

As with class-variables, uFFI integrates with variables defined in shared pools.
Shared pools are useful to group common constants that need to be shared between different classes, bindings or even libraries.
The following code illustrates how we can modify our code to put our variable(s) in a shared pool.
Notice that the only code that changes is the one defining the variable.
The binding using the variable remains unchanged.

[[[language=smalltalk
SharedPool subclass: #FFITutorialPool
	...
	classVariables: 'TheAnswer'
  ...

FFITutorialPool class >> initialize [
	TheAnswer := -42.
]

Object subclass: #FFITutorial
	...
	poolDictionaries: 'FFITutorialPool'
  ...

FFITutorial class >> absMinusFortyTwo [
  ^ self ffiCall: #( int abs ( (int) TheAnswer) ) module: LibC
]
]]]


Using a shared pool does not change from the normal Pharo usage. If you want to know shared pools more in detail, we recommend you take a look at Pharo by Example.


You can also pass ==self== or any instance variable as arguments to a C call.
Suppose you want to add the ==abs== function binding to the class ==SmallInteger== in a method named  ==absoluteValue==, so that we can execute ==-50 absoluteValue==.

In that case we simply add the ==absoluteValue== method to ==SmallInteger==, and we directly pass ==self== as illustrated below.

[[[language=smalltalk
SmallInteger >> absoluteValue [
	^ self ffiCall: #( int abs (int self) ) module: LibC
]
]]]

It is is also possible to pass an instance variable, but we let you do it as an exercise :)

!!! uFFI Data Types

!!!! Passing strings

As you may know strings in C are sequences of characters terminated with a special character: ==\\0==.
It is then interesting to see how FFI-NB deals with them since they are an important data structure in C.
For this, we will call the very well known ==strlen== function.
This function requires a string as argument and returns its number of characters.

""C header"".
[[[
int strlen ( const char * str );
]]]

""Smalltalk binding"".
[[[language=smalltalk
FFICExamples class >> stringLength: aString [
	^ self ffiCall: #( int strlen (String aString) ) module: LibC
]
]]]



!!! Example analysis

You may have noticed that the callout description is not exactly the same as the C function header.

In the signature ==#( int strlen (String aString) )== there are two differences with the C signature.
- The first difference is the const keyword of the argument. For those not used to C, that's only a modifier keyword that the compiler takes into account to make some static validations at compile time. It has no value when describing the signature for calling a function at runtime.
- The second difference, an important one, is the specification of the argument. It is declared as ==String aString== instead of ==char * aString==. With ==String aString==, FFI-NB will automatically do the arguments conversion from Smalltalk strings to C strings (null terminated). Therefore it is important to use String and not ==char *==. In the example, the string passed will be put in an external C ==char== array and a null termination character will be added to it. Also, this array will be automatically released after the call ends. This automatic memory management is very useful but we can also control it as we will see later. Using ==(String aString)== is equivalent to ==(someString copyWith: (Character value:0)== as in ==FFICExamples stringLength: (someString copyWith: (Character value:0)==. Conversely, FFI-NB will take the C result value of calling the C function and convert it to a proper Smalltalk Integer in this particular case.

!!! Passing two strings

We will now call the ==strcmp== function, which takes two strings as arguments and returns -1, 0 or 1 depending on
the relationship between both strings.

""C header""
[[[
	int strcmp ( const char * str1, const char * str2 );
]]]

""Smalltalk binding""
[[[language=smalltalk
FFICExamples class >> stringCompare: aString with: anotherString [
	^ self ffiCall: #( int strcmp (String aString, String anotherString) ) module: LibC
]
]]]

Notice that you can add arguments by appending them to the arguments array, using a comma to separate them. Also
notice that you have to explicitly tell which object is going to be sent for each argument, as already told. In this
case, aString is the first one and anotherString is the second one.

!!! Getting return value from a function

Symmetrically to arguments, returned values are also marshalled, it means that C values are converted to Smalltalk objects.

We already saw that implicitly through multiple examples since the beginning of the chapter.
For example in the ==abs== example, the result is converted from an int to a SmallInteger.
In the ==floor== example, the  result is converted from a double to a Float.

But FFI-NB can also convert types a bit more complex than atomic types, like String

[[[language=smalltalk
FFICExamples >> #getEnv: aString [
	^ self ffiCall: #( String getenv (String string) ) module: LibC
]
]]]

There is a mapping defined for each atomic type. About a bit more complex objects (like external objects or structures),
we will talk in following sections.

!!! Returning "void *"

Take this call as an example:

[[[language=smalltalk
FFICExamples class >> malloc: aNumber [
	^ self ffiCall: #( void * malloc ( int aNumber ) )
]
]]]

This is a special case of return: when there is a function who answers a ''void *''. In this case, since FFI-NB cannot know
which kind of object it represents, it will answer an instance of ==ExternalData== (we will see this in next section).

@@todo Luc illustrate that when NULL (a pointer with value 0) is returned, it is automatically converted to nil
